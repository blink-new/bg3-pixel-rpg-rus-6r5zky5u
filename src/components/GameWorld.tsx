import React, { useState } from 'react'
import { Button } from './ui/button'
import { Card } from './ui/card'
import PartyPanel from './PartyPanel'
import DialogueSystem from './DialogueSystem'
import CombatSystem from './CombatSystem'

interface GameWorldProps {
  character: any
  onBackToMenu: () => void
}

type GameMode = 'exploration' | 'dialogue' | 'combat' | 'camp'

const GameWorld: React.FC<GameWorldProps> = ({ character, onBackToMenu }) => {
  const [gameMode, setGameMode] = useState<GameMode>('exploration')
  const [currentLocation, setCurrentLocation] = useState('–†–∞–∑–±–∏–≤—à–∏–π—Å—è –∫–æ—Ä–∞–±–ª—å')
  const [party, setParty] = useState([
    {
      id: 'tav',
      name: character.name,
      class: character.class,
      level: character.level,
      hp: character.hp,
      maxHp: character.hp,
      stats: character.stats,
      isPlayer: true
    },
    {
      id: 'astarion',
      name: '–ê—Å—Ç–∞—Ä–∏–æ–Ω',
      class: '–ü–ª—É—Ç',
      level: 1,
      hp: 8,
      maxHp: 8,
      stats: { strength: 8, dexterity: 17, constitution: 14, intelligence: 13, wisdom: 13, charisma: 10 },
      isPlayer: false,
      relationship: 0
    },
    {
      id: 'gale',
      name: '–ì–µ–π–ª',
      class: '–í–æ–ª—à–µ–±–Ω–∏–∫',
      level: 1,
      hp: 6,
      maxHp: 6,
      stats: { strength: 8, dexterity: 14, constitution: 15, intelligence: 17, wisdom: 12, charisma: 13 },
      isPlayer: false,
      relationship: 0
    }
  ])

  const locations = [
    {
      name: '–†–∞–∑–±–∏–≤—à–∏–π—Å—è –∫–æ—Ä–∞–±–ª—å',
      description: '–û–±–ª–æ–º–∫–∏ –∏–ª–ª–∏—Ç–∏–¥—Å–∫–æ–≥–æ –∫–æ—Ä–∞–±–ª—è —Ä–∞–∑–±—Ä–æ—Å–∞–Ω—ã –ø–æ –ø–ª—è–∂—É. –°—Ç—Ä–∞–Ω–Ω—ã–µ —â—É–ø–∞–ª—å—Ü–∞ —Ç–æ—Ä—á–∞—Ç –∏–∑ –ø–µ—Å–∫–∞.',
      events: ['–ù–∞–π—Ç–∏ –≤—ã–∂–∏–≤—à–∏—Ö', '–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –æ–±–ª–æ–º–∫–∏', '–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –ê—Å—Ç–∞—Ä–∏–æ–Ω–æ–º']
    },
    {
      name: '–ó–∞–±—Ä–æ—à–µ–Ω–Ω–∞—è –¥–µ—Ä–µ–≤–Ω—è',
      description: '–¢–∏—Ö–∞—è –¥–µ—Ä–µ–≤–Ω—è, –ø–æ–∫–∏–Ω—É—Ç–∞—è –∂–∏—Ç–µ–ª—è–º–∏. –í –≤–æ–∑–¥—É—Ö–µ –≤–∏—Ç–∞–µ—Ç –∑–ª–æ–≤–µ—â–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞.',
      events: ['–û–±—ã—Å–∫–∞—Ç—å –¥–æ–º–∞', '–ù–∞–π—Ç–∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏', '–í—Å—Ç—Ä–µ—Ç–∏—Ç—å –ì–µ–π–ª–∞']
    },
    {
      name: '–õ–∞–≥–µ—Ä—å',
      description: '–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è –æ—Ç–¥—ã—Ö–∞. –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å —Å–ø—É—Ç–Ω–∏–∫–∞–º–∏ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏–ª—ã.',
      events: ['–û—Ç–¥–æ—Ö–Ω—É—Ç—å', '–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –ø–∞—Ä—Ç–∏–µ–π', '–ü–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç']
    }
  ]

  const currentLocationData = locations.find(loc => loc.name === currentLocation) || locations[0]

  const handleEventClick = (event: string) => {
    if (event.includes('–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å') || event.includes('–í—Å—Ç—Ä–µ—Ç–∏—Ç—å')) {
      setGameMode('dialogue')
    } else if (event.includes('—Å—Ä–∞–∂–µ–Ω–∏–µ') || event.includes('–±–æ–π')) {
      setGameMode('combat')
    } else if (event === '–õ–∞–≥–µ—Ä—å' || currentLocation === '–õ–∞–≥–µ—Ä—å') {
      setGameMode('camp')
    }
  }

  const rollD20 = () => {
    return Math.floor(Math.random() * 20) + 1
  }

  if (gameMode === 'dialogue') {
    return (
      <DialogueSystem
        character={character}
        party={party}
        onBack={() => setGameMode('exploration')}
        onUpdateParty={setParty}
      />
    )
  }

  if (gameMode === 'combat') {
    return (
      <CombatSystem
        party={party}
        onCombatEnd={() => setGameMode('exploration')}
        onUpdateParty={setParty}
      />
    )
  }

  return (
    <div className="min-h-screen bg-gradient-to-b from-amber-900 via-amber-800 to-amber-900">
      <div className="flex h-screen">
        {/* Left Panel - Party */}
        <div className="w-80 bg-amber-900 border-r-4 border-amber-600 p-4 overflow-y-auto">
          <PartyPanel party={party} />
        </div>

        {/* Main Game Area */}
        <div className="flex-1 p-6 overflow-y-auto">
          {/* Location Header */}
          <Card className="pixel-panel mb-6">
            <div className="flex justify-between items-start mb-4">
              <div>
                <h1 className="text-2xl text-amber-200 font-bold mb-2">{currentLocation}</h1>
                <p className="text-amber-300 text-sm leading-relaxed">
                  {currentLocationData.description}
                </p>
              </div>
              <Button onClick={onBackToMenu} className="pixel-button text-sm">
                –ú–ï–ù–Æ
              </Button>
            </div>
          </Card>

          {/* Location Visual */}
          <Card className="pixel-panel mb-6">
            <div className="h-64 bg-gradient-to-b from-amber-700 to-amber-800 border-2 border-amber-600 flex items-center justify-center">
              <div className="text-center">
                <div className="w-32 h-32 bg-amber-600 mx-auto mb-4 border-4 border-amber-500 flex items-center justify-center">
                  <span className="text-4xl">üèõÔ∏è</span>
                </div>
                <p className="text-amber-200 text-sm">{currentLocation}</p>
              </div>
            </div>
          </Card>

          {/* Available Actions */}
          <Card className="pixel-panel mb-6">
            <h2 className="text-xl text-amber-200 mb-4">–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è</h2>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
              {currentLocationData.events.map((event, index) => (
                <Button
                  key={index}
                  onClick={() => handleEventClick(event)}
                  className="pixel-button text-left p-4 h-auto hover:scale-105 transform transition-all duration-200"
                >
                  <div>
                    <p className="font-bold mb-1">{event}</p>
                    <p className="text-xs opacity-75">
                      {event.includes('–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å') ? '–î–∏–∞–ª–æ–≥' : 
                       event.includes('—Å—Ä–∞–∂–µ–Ω–∏–µ') ? '–ë–æ–π' : '–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ'}
                    </p>
                  </div>
                </Button>
              ))}
            </div>
          </Card>

          {/* Quick Actions */}
          <Card className="pixel-panel">
            <h2 className="text-xl text-amber-200 mb-4">–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è</h2>
            <div className="flex flex-wrap gap-3">
              <Button 
                onClick={() => setCurrentLocation('–õ–∞–≥–µ—Ä—å')}
                className="pixel-button"
              >
                üèïÔ∏è –í –ª–∞–≥–µ—Ä—å
              </Button>
              <Button 
                onClick={() => {
                  const roll = rollD20()
                  alert(`–ë—Ä–æ—Å–æ–∫ d20: ${roll}`)
                }}
                className="pixel-button"
              >
                üé≤ –ë—Ä–æ—Å–∏—Ç—å d20
              </Button>
              <Button 
                onClick={() => setGameMode('dialogue')}
                className="pixel-button"
              >
                üí¨ –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –ø–∞—Ä—Ç–∏–µ–π
              </Button>
              <Button 
                onClick={() => {
                  const newLocation = locations[Math.floor(Math.random() * locations.length)]
                  setCurrentLocation(newLocation.name)
                }}
                className="pixel-button"
              >
                üó∫Ô∏è –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å
              </Button>
            </div>
          </Card>
        </div>
      </div>
    </div>
  )
}

export default GameWorld