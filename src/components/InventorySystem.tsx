import React, { useState } from 'react'
import { Button } from './ui/button'
import { Card } from './ui/card'

interface InventorySystemProps {
  character: any
  party: any[]
  onBack: () => void
  onUpdateCharacter: (character: any) => void
}

interface Item {
  id: string
  name: string
  type: 'weapon' | 'armor' | 'consumable' | 'misc'
  rarity: 'common' | 'uncommon' | 'rare' | 'epic' | 'legendary'
  description: string
  stats?: {
    damage?: string
    ac?: number
    bonus?: string
  }
  quantity: number
  equipped?: boolean
}

const InventorySystem: React.FC<InventorySystemProps> = ({ character, party, onBack, onUpdateCharacter }) => {
  const [selectedTab, setSelectedTab] = useState<'inventory' | 'equipment' | 'spells'>('inventory')
  const [selectedItem, setSelectedItem] = useState<Item | null>(null)
  
  const [inventory, setInventory] = useState<Item[]>([
    {
      id: 'shortsword',
      name: '–ö–æ—Ä–æ—Ç–∫–∏–π –º–µ—á',
      type: 'weapon',
      rarity: 'common',
      description: '–ü—Ä–æ—Å—Ç–æ–µ, –Ω–æ –Ω–∞–¥—ë–∂–Ω–æ–µ –æ—Ä—É–∂–∏–µ. –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –∞—Ç–∞–∫.',
      stats: { damage: '1d6 + –õ–æ–≤' },
      quantity: 1,
      equipped: true
    },
    {
      id: 'leather_armor',
      name: '–ö–æ–∂–∞–Ω–∞—è –±—Ä–æ–Ω—è',
      type: 'armor',
      rarity: 'common',
      description: '–õ—ë–≥–∫–∞—è –±—Ä–æ–Ω—è –∏–∑ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–π –∫–æ–∂–∏.',
      stats: { ac: 11 },
      quantity: 1,
      equipped: true
    },
    {
      id: 'healing_potion',
      name: '–ó–µ–ª—å–µ –ª–µ—á–µ–Ω–∏—è',
      type: 'consumable',
      rarity: 'common',
      description: '–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç 2d4+2 –∑–¥–æ—Ä–æ–≤—å—è.',
      quantity: 3
    },
    {
      id: 'magic_scroll',
      name: '–°–≤–∏—Ç–æ–∫ –ú–∞–≥–∏—á–µ—Å–∫–æ–π —Å—Ç—Ä–µ–ª—ã',
      type: 'consumable',
      rarity: 'uncommon',
      description: '–ü–æ–∑–≤–æ–ª—è–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ –ú–∞–≥–∏—á–µ—Å–∫–∞—è —Å—Ç—Ä–µ–ª–∞.',
      quantity: 2
    },
    {
      id: 'silver_ring',
      name: '–°–µ—Ä–µ–±—Ä—è–Ω–æ–µ –∫–æ–ª—å—Ü–æ',
      type: 'misc',
      rarity: 'uncommon',
      description: '–ö—Ä–∞—Å–∏–≤–æ–µ –∫–æ–ª—å—Ü–æ —Å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–º–∏ —Ä—É–Ω–∞–º–∏.',
      quantity: 1
    },
    {
      id: 'thieves_tools',
      name: '–í–æ—Ä–æ–≤—Å–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã',
      type: 'misc',
      rarity: 'common',
      description: '–ù–∞–±–æ—Ä –æ—Ç–º—ã—á–µ–∫ –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –≤–∑–ª–æ–º–∞.',
      quantity: 1
    }
  ])

  const spells = [
    {
      name: '–ú–∞–≥–∏—á–µ—Å–∫–∞—è —Å—Ç—Ä–µ–ª–∞',
      level: 1,
      school: '–í–æ–ø–ª–æ—â–µ–Ω–∏–µ',
      description: '–¢—Ä–∏ —Å–≤–µ—Ç—è—â–∏–µ—Å—è —Å—Ç—Ä–µ–ª—ã –ø–æ—Ä–∞–∂–∞—é—Ç —Ü–µ–ª—å. –£—Ä–æ–Ω: 1d4+1 –∑–∞ —Å—Ç—Ä–µ–ª—É.',
      prepared: true
    },
    {
      name: '–õ–µ—á–µ–Ω–∏–µ —Ä–∞–Ω',
      level: 1,
      school: '–í–æ–ø–ª–æ—â–µ–Ω–∏–µ',
      description: '–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç 1d8 + –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–∫–ª–∏–Ω–∞—Ç–µ–ª—å–Ω–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è.',
      prepared: true
    },
    {
      name: '–©–∏—Ç',
      level: 1,
      school: '–û–≥—Ä–∞–∂–¥–µ–Ω–∏–µ',
      description: '–†–µ–∞–∫—Ü–∏—è. +5 –∫ –ö–î –ø—Ä–æ—Ç–∏–≤ –æ–¥–Ω–æ–π –∞—Ç–∞–∫–∏.',
      prepared: false
    },
    {
      name: '–û–≥–Ω–µ–Ω–Ω—ã–π —à–∞—Ä',
      level: 3,
      school: '–í–æ–ø–ª–æ—â–µ–Ω–∏–µ',
      description: '–í–∑—Ä—ã–≤ –æ–≥–Ω—è –≤ —Ä–∞–¥–∏—É—Å–µ 20 —Ñ—É—Ç–æ–≤. –£—Ä–æ–Ω: 8d6 –æ–≥–Ω—ë–º.',
      prepared: false
    }
  ]

  const getRarityColor = (rarity: string) => {
    switch (rarity) {
      case 'common': return 'border-gray-400 text-gray-300'
      case 'uncommon': return 'border-green-400 text-green-300'
      case 'rare': return 'border-blue-400 text-blue-300'
      case 'epic': return 'border-purple-400 text-purple-300'
      case 'legendary': return 'border-yellow-400 text-yellow-300'
      default: return 'border-gray-400 text-gray-300'
    }
  }

  const getTypeIcon = (type: string) => {
    switch (type) {
      case 'weapon': return '‚öîÔ∏è'
      case 'armor': return 'üõ°Ô∏è'
      case 'consumable': return 'üß™'
      case 'misc': return 'üíé'
      default: return 'üì¶'
    }
  }

  const handleUseItem = (item: Item) => {
    if (item.type === 'consumable') {
      if (item.name.includes('–ó–µ–ª—å–µ –ª–µ—á–µ–Ω–∏—è')) {
        const healing = Math.floor(Math.random() * 8) + 4 // 2d4+2
        const updatedCharacter = {
          ...character,
          hp: Math.min(character.maxHp, character.hp + healing)
        }
        onUpdateCharacter(updatedCharacter)
        
        // Reduce quantity
        const updatedInventory = inventory.map(invItem => 
          invItem.id === item.id 
            ? { ...invItem, quantity: invItem.quantity - 1 }
            : invItem
        ).filter(invItem => invItem.quantity > 0)
        
        setInventory(updatedInventory)
        alert(`–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ${healing} –∑–¥–æ—Ä–æ–≤—å—è!`)
      } else if (item.name.includes('–°–≤–∏—Ç–æ–∫')) {
        alert('–ó–∞–∫–ª–∏–Ω–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ!')
        const updatedInventory = inventory.map(invItem => 
          invItem.id === item.id 
            ? { ...invItem, quantity: invItem.quantity - 1 }
            : invItem
        ).filter(invItem => invItem.quantity > 0)
        setInventory(updatedInventory)
      }
    }
  }

  const equipItem = (item: Item) => {
    if (item.type === 'weapon' || item.type === 'armor') {
      const updatedInventory = inventory.map(invItem => {
        if (invItem.type === item.type) {
          return { ...invItem, equipped: invItem.id === item.id }
        }
        return invItem
      })
      setInventory(updatedInventory)
      alert(`${item.name} —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω!`)
    }
  }

  const filteredItems = inventory.filter(item => {
    if (selectedTab === 'equipment') {
      return item.type === 'weapon' || item.type === 'armor'
    }
    return true
  })

  return (
    <div className="min-h-screen bg-gradient-to-b from-amber-900 via-amber-800 to-amber-900 p-4">
      <div className="max-w-6xl mx-auto">
        {/* Header */}
        <div className="flex justify-between items-center mb-6">
          <h1 className="text-2xl font-bold text-amber-200 pixel-glow">–ò–ù–í–ï–ù–¢–ê–†–¨</h1>
          <Button onClick={onBack} className="pixel-button">
            ‚Üê –ù–ê–ó–ê–î
          </Button>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          {/* Left Panel - Tabs and Items */}
          <div className="lg:col-span-2 space-y-6">
            {/* Tabs */}
            <Card className="pixel-panel">
              <div className="flex space-x-2">
                <Button
                  onClick={() => setSelectedTab('inventory')}
                  className={`pixel-button ${selectedTab === 'inventory' ? 'bg-amber-600' : ''}`}
                >
                  üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å
                </Button>
                <Button
                  onClick={() => setSelectedTab('equipment')}
                  className={`pixel-button ${selectedTab === 'equipment' ? 'bg-amber-600' : ''}`}
                >
                  ‚öîÔ∏è –°–Ω–∞—Ä—è–∂–µ–Ω–∏–µ
                </Button>
                <Button
                  onClick={() => setSelectedTab('spells')}
                  className={`pixel-button ${selectedTab === 'spells' ? 'bg-amber-600' : ''}`}
                >
                  üìú –ó–∞–∫–ª–∏–Ω–∞–Ω–∏—è
                </Button>
              </div>
            </Card>

            {/* Items Grid */}
            {selectedTab !== 'spells' && (
              <Card className="pixel-panel">
                <h2 className="text-xl text-amber-200 mb-4">
                  {selectedTab === 'inventory' ? '–ü—Ä–µ–¥–º–µ—Ç—ã' : '–≠–∫–∏–ø–∏—Ä–æ–≤–∫–∞'}
                </h2>
                <div className="grid grid-cols-2 md:grid-cols-3 gap-3">
                  {filteredItems.map((item) => (
                    <button
                      key={item.id}
                      onClick={() => setSelectedItem(item)}
                      className={`p-3 border-2 transition-all duration-200 hover:scale-105 ${
                        getRarityColor(item.rarity)
                      } ${
                        selectedItem?.id === item.id ? 'bg-amber-700' : 'bg-amber-800/50'
                      } ${
                        item.equipped ? 'ring-2 ring-amber-400' : ''
                      }`}
                    >
                      <div className="text-center">
                        <div className="text-2xl mb-1">{getTypeIcon(item.type)}</div>
                        <p className="text-sm font-bold mb-1">{item.name}</p>
                        {item.quantity > 1 && (
                          <p className="text-xs text-amber-400">x{item.quantity}</p>
                        )}
                        {item.equipped && (
                          <p className="text-xs text-green-400">‚úì –≠–∫–∏–ø–∏—Ä–æ–≤–∞–Ω–æ</p>
                        )}
                      </div>
                    </button>
                  ))}
                </div>
              </Card>
            )}

            {/* Spells */}
            {selectedTab === 'spells' && (
              <Card className="pixel-panel">
                <h2 className="text-xl text-amber-200 mb-4">–ó–∞–∫–ª–∏–Ω–∞–Ω–∏—è</h2>
                <div className="space-y-3">
                  {spells.map((spell, index) => (
                    <div
                      key={index}
                      className={`p-4 border-2 transition-all duration-200 ${
                        spell.prepared 
                          ? 'border-amber-400 bg-amber-700/50' 
                          : 'border-amber-600 bg-amber-800/50'
                      }`}
                    >
                      <div className="flex justify-between items-start mb-2">
                        <div>
                          <h3 className="text-lg text-amber-200 font-bold">{spell.name}</h3>
                          <p className="text-sm text-amber-400">
                            {spell.level} —É—Ä–æ–≤–µ–Ω—å ‚Ä¢ {spell.school}
                          </p>
                        </div>
                        <div className="text-right">
                          {spell.prepared ? (
                            <span className="text-green-400 text-sm">‚úì –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ</span>
                          ) : (
                            <Button className="pixel-button text-xs">
                              –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å
                            </Button>
                          )}
                        </div>
                      </div>
                      <p className="text-amber-300 text-sm">{spell.description}</p>
                    </div>
                  ))}
                </div>
              </Card>
            )}
          </div>

          {/* Right Panel - Item Details */}
          <div className="space-y-6">
            {/* Character Stats */}
            <Card className="pixel-panel">
              <h2 className="text-lg text-amber-200 mb-3">–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏</h2>
              <div className="space-y-2 text-sm">
                <div className="flex justify-between">
                  <span className="text-amber-300">–ó–¥–æ—Ä–æ–≤—å–µ:</span>
                  <span className="text-amber-200">{character.hp}/{character.maxHp}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-amber-300">–ö–ª–∞—Å—Å –¥–æ—Å–ø–µ—Ö–∞:</span>
                  <span className="text-amber-200">
                    {10 + Math.floor((character.stats.dexterity - 10) / 2) + 
                     (inventory.find(i => i.equipped && i.type === 'armor')?.stats?.ac || 0)}
                  </span>
                </div>
                <div className="flex justify-between">
                  <span className="text-amber-300">–£—Ä–æ–≤–µ–Ω—å:</span>
                  <span className="text-amber-200">{character.level}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-amber-300">–û–ø—ã—Ç:</span>
                  <span className="text-amber-200">{character.experience || 0}/1000</span>
                </div>
              </div>
            </Card>

            {/* Item Details */}
            {selectedItem && (
              <Card className="pixel-panel">
                <div className="text-center mb-4">
                  <div className="text-4xl mb-2">{getTypeIcon(selectedItem.type)}</div>
                  <h2 className={`text-lg font-bold ${getRarityColor(selectedItem.rarity)}`}>
                    {selectedItem.name}
                  </h2>
                  <p className="text-amber-400 text-sm capitalize">{selectedItem.rarity}</p>
                </div>

                <p className="text-amber-300 text-sm mb-4 leading-relaxed">
                  {selectedItem.description}
                </p>

                {selectedItem.stats && (
                  <div className="mb-4 p-3 bg-amber-800/50 border border-amber-600">
                    <h3 className="text-amber-200 font-bold mb-2">–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:</h3>
                    {selectedItem.stats.damage && (
                      <p className="text-amber-300 text-sm">–£—Ä–æ–Ω: {selectedItem.stats.damage}</p>
                    )}
                    {selectedItem.stats.ac && (
                      <p className="text-amber-300 text-sm">–ö–î: {selectedItem.stats.ac}</p>
                    )}
                    {selectedItem.stats.bonus && (
                      <p className="text-amber-300 text-sm">–ë–æ–Ω—É—Å: {selectedItem.stats.bonus}</p>
                    )}
                  </div>
                )}

                <div className="space-y-2">
                  {selectedItem.type === 'consumable' && (
                    <Button
                      onClick={() => handleUseItem(selectedItem)}
                      className="w-full pixel-button"
                    >
                      üß™ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
                    </Button>
                  )}
                  
                  {(selectedItem.type === 'weapon' || selectedItem.type === 'armor') && (
                    <Button
                      onClick={() => equipItem(selectedItem)}
                      disabled={selectedItem.equipped}
                      className="w-full pixel-button"
                    >
                      {selectedItem.equipped ? '‚úì –≠–∫–∏–ø–∏—Ä–æ–≤–∞–Ω–æ' : '‚öîÔ∏è –≠–∫–∏–ø–∏—Ä–æ–≤–∞—Ç—å'}
                    </Button>
                  )}

                  {selectedItem.quantity > 1 && (
                    <p className="text-center text-amber-400 text-sm">
                      –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {selectedItem.quantity}
                    </p>
                  )}
                </div>
              </Card>
            )}

            {/* Quick Actions */}
            <Card className="pixel-panel">
              <h2 className="text-lg text-amber-200 mb-3">–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è</h2>
              <div className="space-y-2">
                <Button
                  onClick={() => {
                    const healingPotion = inventory.find(i => i.name.includes('–ó–µ–ª—å–µ –ª–µ—á–µ–Ω–∏—è'))
                    if (healingPotion) {
                      handleUseItem(healingPotion)
                    } else {
                      alert('–ù–µ—Ç –∑–µ–ª–∏–π –ª–µ—á–µ–Ω–∏—è!')
                    }
                  }}
                  className="w-full pixel-button text-sm"
                >
                  üß™ –ë—ã—Å—Ç—Ä–æ–µ –ª–µ—á–µ–Ω–∏–µ
                </Button>
                <Button
                  onClick={() => {
                    alert('–í—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!')
                  }}
                  className="w-full pixel-button text-sm"
                >
                  üì¶ –°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å
                </Button>
                <Button
                  onClick={() => {
                    const totalValue = inventory.reduce((sum, item) => sum + item.quantity * 10, 0)
                    alert(`–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è: ${totalValue} –∑–æ–ª–æ—Ç—ã—Ö`)
                  }}
                  className="w-full pixel-button text-sm"
                >
                  üí∞ –û—Ü–µ–Ω–∏—Ç—å
                </Button>
              </div>
            </Card>
          </div>
        </div>
      </div>
    </div>
  )
}

export default InventorySystem